{"name":"Smackage","body":"Smackage is a prototype package manager for Standard ML libraries. Right now \r\nit does only minimal installation; it is mainly designed to provide a \r\nstandard way of getting Standard ML code that understands where other \r\nStandard ML code might be found on the filesystem.\r\n\r\nInstallation\r\n------------\r\nInstallation takes five steps, and the first and last two steps are \r\noptional.\r\n\r\n**Step 1: Pick a `SMACKAGE_HOME` directory (optional).**\r\n\r\nThe `$SMACKAGE_HOME` directory is where Smackage will put all of its files. \r\nThis will be `~/.smackage` by default if you don't do anything; see the \r\nsection \"The $SMACKAGE_HOME directory\" towards the bottom if you'd like \r\nSmackage to put its files somewhere else.\r\n\r\n**Step 2: Set up your SML compilers to use Smackage.**\r\n\r\nYou have to configure your SML compilers to find the code that Smackage \r\nwill put on your system. This is a bit system-dependent; see the section \r\n\"Setting up your SML path map\" below for details.\r\n\r\n**Step 3: Download.**\r\n\r\nFinally, you can actually build Smackage with the following commands; the \r\nfirst `git clone...` command is just one of the ways you can get smackage\r\nonto your hard drive; an alternative would be to download one of the\r\n[tarred or zipped releases](https://github.com/standardml/smackage/tags). \r\nNote: the directory (probably named `smackage`) that you put the initial \r\nSmackage code into should *not* be the same as the `$SMACKAGE_HOME` \r\ndirectory.\r\n\r\n    $ git clone git://github.com/standardml/smackage.git # or something\r\n    $ cd smackage\r\n    $ make mlton # (or `smlnj', or `win+smlnj' if you're in Cygwin)\r\n    $ bin/smackage\r\n\r\nSmackage now lives in the `bin` subdirectory of the current directory.\r\n\r\n**Step 4: Update your PATH (optional).**\r\n\r\nSmackage-aware applications have a makefile option `install` that places \r\na binary in `$SMACKAGE_HOME/bin` *IF* the makefile is invoked through \r\n`smackage make`. If you want to use Smackage to install applications,\r\nyou should add `$SMACKAGE_HOME/bin` to your `PATH` environment variable.\r\n\r\n(Remember: don't literally add `$SMACKAGE_HOME/bin`, replace \r\n`$SMACKAGE_HOME` with the absolute path of whatever directory you picked\r\nin Step 1. So you'll really add something like \r\n`/Users/myusername/.smackage/bin` to your path.)\r\n\r\n**Step 5: Bootstrap (optional).**\r\n\r\nSmackage is a smackage-aware application! If you added \r\n`$SMACKAGE_HOME/bin` to your search path, then you can run the following:\r\n\r\n    $ bin/smackage refresh\r\n    $ bin/smackage make smackage mlton # or smlnj, or win+smlnj\r\n    $ bin/smackage make smackage install\r\n    $ which smackage \r\n\r\n(Type `bin/smackage make smackage` to see all the possible installation \r\noptions: polyml, win+mlton, etc...)\r\n\r\nThe last command, `which smackage`, should report that Smackage can be found\r\nat `$SMACKAGE_HOME/bin/smackage`. Now you've bootstrapped Smackage: you no \r\nlonger need the current directory where you downloaded Smackage, you just \r\nneed the `$SMACKAGE_HOME` directory.\r\n\r\n### Referring to Smackage packages\r\n\r\nIf you've performed all the steps described above, you can will be able to \r\nrefer to cmlib as `$SMACKAGE/cmlib/v1/cmlib.cm` (in SML/NJ .cm files) or as \r\n`$(SMACKAGE)/cmlib/v1/cmlib.mlb` (in MLton .mlb files).\r\n\r\nYou want to add `$SMACKAGE_HOME/bin` to your path if you want to use \r\napplications compiled through smackage.\r\n\r\n### Building Smackage packages\r\n\r\nSmackage doesn't have a uniform build process, at least not yet. Instead, we\r\nsupport a simple `smackage make` command. If you type \r\n`smackage make package blah blah blah`, smackage will try to run \r\n`make blah blah blah` in the directory where `package` lives. We suggest that\r\nif your tool compiles, you add a makefile option `install` that copies a \r\ncreated binary to the directory `$(DESTDIR)/bin`, in the style\r\ndescribed [here](http://www.gnu.org/prep/standards/html_node/DESTDIR.html). \r\nFor instance, the following commands get and install [Twelf](http://twelf.org).\r\n\r\n    $ smackage refresh\r\n    $ smackage get twelf\r\n    $ smackage make twelf smlnj # or mlton, ...\r\n    $ smackage make twelf install\r\n\r\nIf `$SMACKAGE_HOME/bin` is on your search path, you can then refer to the\r\n`twelf-server` binary like this:\r\n\r\n    $ which twelf-server\r\n    /Users/rjsimmon/.smackage/bin/twelf-server\r\n    $ twelf-server\r\n    Twelf 1.7.1+ (built 10/30/11 at 00:37:12 on concordia.wv.cc.cmu.edu)\r\n    %% OK %%\r\n\r\nSetting up your SML path map\r\n----------------------------\r\nSmackage will live in a directory that we'll refer to\r\nas `$SMACKAGE_HOME` in this section. This directory is probably \r\n`~/.smackage`, but see the section on `$SMACKAGE_HOME` below for more \r\ninformation. Whenever you see the string `$SMACKAGE_HOME` in this system, you \r\nshould replace it with the appropriate absolute file path, for instance I \r\nwouldn't actually write\r\n\r\n    SMACKAGE $SMACKAGE_HOME/lib\r\n\r\nin a pathconfig file for Standard ML of New Jersey; instead, I'd write \r\n\r\n    SMACKAGE /Users/rjsimmon/.smackage/lib\r\n\r\nMake sure you use an absolute path - starting with \"/\", or whatever your system\r\nuses to refer to the file system root.\r\n\r\n### Setting up SML/NJ (system-wide)\r\n\r\nFind the file `lib/pathconfig` in the installation directory for SML/NJ, and \r\nadd the following line:\r\n  \r\n    SMACKAGE $SMACKAGE_HOME/lib\r\n\r\n### Setting up SML/NJ (user-only)\r\n\r\nCreate a file `~/.smlnj-pathconfig` containing the following line (or add\r\nthe following line to `~/.smlnj-pathconfig` if it exists already):\r\n\r\n    SMACKAGE $SMACKAGE_HOME/lib\r\n\r\n### Setting up MLton (system-wide)\r\n\r\nFind the [MLBasis Path Map](http://mlton.org/MLBasisPathMap), stored\r\nin a file called `mlb-path-map`, usually somewhere like \r\n`/usr/lib/mlton/mlb-path-map` or \r\n`/usr/local/lib/mlton/mlb-path-map`, depending on your system. Add the line\r\n\r\n    SMACKAGE $SMACKAGE_HOME/lib\r\n\r\n### Setting up MLton (user-only)\r\n\r\nMLton allows mlb path variables to be set on the mlton command\r\nline. If you don't want to edit the global mlb-path-map file, you\r\ncan pass the SMACKAGE path as a command line argument to mlton. Since\r\ndoing this all the time is tedious and would break build scripts, you\r\nprobably want to set up a wrapper script somewhere in your path that\r\nlooks like:\r\n\r\n    #!/bin/sh\r\n    $MLTON_PATH -mlb-path-var 'SMACKAGE $SMACKAGE_HOME/lib' \"$@\"\r\n\r\nwhere `$MLTON_PATH` and `$SMACKAGE_HOME` are replaced with the appropriate\r\npaths. For example, on my system, I have a file /home/sully/bin/mlton\r\nthat contains:\r\n\r\n    #!/bin/sh\r\n    /usr/bin/mlton -mlb-path-var 'SMACKAGE /home/sully/.smackage/lib' \"$@\"\r\n\r\nThe $SMACKAGE_HOME directory\r\n----------------------------\r\nSmackage has to figure out where it lives on the file system whenever it\r\nstarts up; the installation instructions referred to the directory where\r\nsmackage lives as `$SMACKAGE_HOME`. Smackage goes through the following process\r\nto try and determine `$SMACKAGE_HOME`:\r\n\r\n 1. If the `SMACKAGE_HOME` environment variable is defined, then smackage will\r\n    always use that as `$SMACKAGE_HOME`. If this directory does not \r\n    exist, smackage will try to create it. Otherwise,\r\n 2. If `/usr/local/smackage` exists, smackage will use that as\r\n    `$SMACKAGE_HOME`. Otherwise,\r\n 3. If `/opt/smackage/` exists, smackage will use that as\r\n    `$SMACKAGE_HOME`. Otherwise,\r\n 4. As a last resort, smackage will try to use `~/.smackage`, where `~` is \r\n    defined by the `HOME` environment variable. If this directory does not \r\n    exist, smackage will try to create it. \r\n\r\n","tagline":"Smackage Package Manager for Standard ML","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}